<section>
  <div class="container mt-4">
    <div class="row justify-content-center">
      {{#each products}}
      <div class="col-6 col-md-3 p-2 d-flex justify-content-center">
        <div class="card product-card" style="width: 100%; max-width: 250px; height: 24rem; border: none; border-radius: 15px; background: linear-gradient(135deg, #ffffff 0%, #f9f9f9 100%); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); transition: transform 0.3s ease, box-shadow 0.3s ease; overflow: hidden;">
          <div class="image-container" style="height: 45%; padding: 10px;">
            <img src="{{#if Image}}/product-images/{{Image}}{{else}}/product-images/{{_id}}.jpg{{/if}}" class="card-img-top cart-image" style="width: 100%; height: 100%; object-fit: contain; border-radius: 15px 15px 0 0;" alt="{{Name}}" onerror="this.style.display='none';">
          </div>
          <div class="card-body d-flex flex-column justify-content-between" style="padding: 0.75rem;">
            <div class="text-center">
              <h5 class="card-title" style="font-family: 'Lora', serif; font-size: 1rem; font-weight: 600; color: #1a252f; margin-bottom: 0.4rem;">{{Name}}</h5>
              <p class="card-text" style="font-family: 'Poppins', sans-serif; font-size: 0.8rem; color: #7f8c8d; line-height: 1.2; margin-bottom: 0.4rem;">{{Description}}</p>
              <h6 class="card-title" style="font-family: 'Poppins', serif; font-size: 1rem; font-weight: 600; color: #1a252f;">Rs. {{Price}}</h6>
            </div>
            <button type="button" class="btn btn-primary w-100 mt-1 add-to-cart-btn" data-product-id="{{_id}}" style="border-radius: 10px; font-size: 0.8rem; padding: 0.4rem; background: linear-gradient(135deg, #2c6da6 0%, #3498db 100%); border: none; transition: all 0.3s ease;">Add to Cart</button>
          </div>
        </div>
      </div>
      {{/each}}
    </div>
  </div>
</section>

<style>
  .product-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    background: linear-gradient(135deg, #f9f9f9 0%, #ffffff 100%);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #1e5b8c 0%, #2c6da6 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.5);
  }

  @media (max-width: 767px) {
    .col-6 {
      flex: 0 0 50%;
      max-width: 50%;
    }
    .card {
      height: 20rem;
      max-width: 200px;
    }
    .image-container {
      height: 40%;
      padding: 8px;
    }
    .card-title, .card-text, .btn {
      font-size: 0.7rem;
    }
    .card-body {
      padding: 0.5rem;
    }
  }

  @media (min-width: 768px) {
    .col-md-3 {
      flex: 0 0 25%;
      max-width: 25%;
    }
  }
</style>

<script>
  // Log script execution start
  console.log('view-products.hbs script loaded at:', new Date().toISOString());

  // Pass the user object from the server to check login status
  let user = null;
  try {
    const userData = {{{json user}}} // Convert user object to JSON for client-side use
    user = userData;
    console.log('User object loaded:', user);
    if (user && user._id) {
      console.log('User ID:', user._id);
    } else {
      console.log('No valid user object or user._id missing');
    }
  } catch (error) {
    console.error('Error parsing user object:', error.message);
    user = null;
  }

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, setting up event listeners');
    const buttons = document.querySelectorAll('.add-to-cart-btn');
    if (buttons.length === 0) {
      console.error('No Add to Cart buttons found on the page');
    } else {
      console.log('Found', buttons.length, 'Add to Cart buttons');
    }
    buttons.forEach((button, index) => {
      console.log(`Setting up button ${index + 1} with product ID:`, button.getAttribute('data-product-id'));
      button.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent any default behavior
        const productId = this.getAttribute('data-product-id');
        console.log('Add to Cart clicked for product ID:', productId);
        addToCart(productId, this);
      });
    });
  });

  function addToCart(productId, button) {
    console.log('addToCart called with productId:', productId);

    // If user is not logged in, redirect to login page
    if (!user || !user._id) {
      console.log('User not logged in or user._id missing, attempting to redirect to /login');
      try {
        // Try multiple redirect methods to ensure it works
        window.location.href = '/login'; // Primary method
        console.log('window.location.href set to /login');
        setTimeout(() => {
          if (window.location.pathname !== '/login') {
            console.warn('window.location.href did not redirect, trying window.location.assign');
            window.location.assign('/login');
            setTimeout(() => {
              if (window.location.pathname !== '/login') {
                console.warn('window.location.assign did not redirect, trying window.location.replace');
                window.location.replace('/login');
              }
            }, 500);
          }
        }, 500);
      } catch (error) {
        console.error('Error during redirect to /login:', error.message);
        alert('Failed to redirect to login page. Please navigate to /login manually.');
      }
      return;
    }

    // If user is logged in, proceed with adding to cart
    console.log('User is logged in, proceeding with add to cart');
    const originalText = button.textContent;
    button.textContent = 'Adding...';
    button.disabled = true;
    console.log('Button state changed to loading');

    fetch(`/add-to-cart/${productId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include' // Include cookies for session handling
    })
      .then(response => {
        console.log('Fetch response received:', { 
          status: response.status, 
          statusText: response.statusText, 
          redirected: response.redirected, 
          url: response.url 
        });

        if (response.redirected || response.status === 302) {
          console.log('Redirect detected, redirecting to:', response.url);
          window.location.href = '/login';
          return null;
        }

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status} ${response.statusText}`);
        }

        return response.json().catch(err => {
          console.error('Failed to parse JSON response:', err.message);
          throw new Error('Invalid JSON response from server');
        });
      })
      .then(data => {
        button.textContent = originalText;
        button.disabled = false;
        console.log('Button state reset to normal');

        if (!data) return;

        console.log('Parsed response data:', data);

        if (data.redirect) {
          console.log('Server instructed redirect to:', data.redirect);
          window.location.href = data.redirect;
          return;
        }

        if (data.status) {
          console.log('Product added to cart successfully');
          alert('Product added to cart successfully!');
          updateCartCount();
        } else {
          console.error('Add to cart failed:', data.error || 'Unknown error');
          alert('Failed to add product to cart: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        button.textContent = originalText;
        button.disabled = false;
        console.error('Add to Cart Error:', error.message);
        alert('An error occurred while adding the product to the cart: ' + error.message);
      });
  }

  // Optional: Function to update cart count in the UI
  function updateCartCount() {
    console.log('Fetching cart count from /get-cart-count');
    fetch('/get-cart-count', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include'
    })
      .then(response => {
        console.log('Cart count fetch response:', { status: response.status, redirected: response.redirected });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Cart count response:', data);
        if (data.count !== undefined) {
          const cartCountElement = document.getElementById('cart-count');
          if (cartCountElement) {
            cartCountElement.textContent = data.count;
            cartCountElement.style.display = data.count > 0 ? 'block' : 'none';
            console.log('Cart count updated in UI:', data.count);
          } else {
            console.warn('Cart count element not found in DOM');
          }
        }
      })
      .catch(error => {
        console.error('Error fetching cart count:', error.message);
      });
  }
</script>