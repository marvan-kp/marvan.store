<section class="container my-5">
  {{#if error}}
  <div class="alert alert-danger" role="alert">
    {{error}}
  </div>
  {{else}}
  <div class="row">
    <!-- Product Images Carousel -->
    <div class="col-md-6">
      <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
          {{#each product.Images}}
          <div class="carousel-item {{#if @first}}active{{/if}}">
            <img src="/product-images/{{this}}" class="d-block w-100" style="height: 400px; object-fit: contain; border-radius: 15px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);" alt="{{../product.Name}} - Image" onerror="this.style.display='none';">
          </div>
          {{/each}}
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
      <!-- Thumbnails -->
      <div class="d-flex justify-content-center mt-3">
        {{#each product.Images}}
        <img src="/product-images/{{this}}" class="thumbnail-img mx-1" style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px; cursor: pointer; border: 2px solid transparent; transition: border 0.3s ease;" data-bs-target="#productCarousel" data-bs-slide-to="{{@index}}" alt="Thumbnail" onerror="this.style.display='none';">
        {{/each}}
      </div>
    </div>

    <!-- Product Details -->
    <div class="col-md-6">
      <h2 style="font-family: 'Playfair Display', serif; font-weight: 700; color: #1a252f;">{{product.Name}}</h2>
      <p style="font-family: 'Inter', sans-serif; font-size: 1rem; color: #6c757d; line-height: 1.6;">{{product.Description}}</p>
      <h4 style="font-family: 'Inter', sans-serif; font-weight: 600; color: #1a252f;">Rs. {{product.Price}}</h4>

      <!-- Average Rating and Review Count -->
      {{#if averageRating}}
      <div class="mt-2">
        <span style="font-family: 'Inter', sans-serif; color: #1a252f;">Average Rating: {{round averageRating}} ★</span>
        <span style="font-family: 'Inter', sans-serif; color: #6c757d;"> ({{reviewCount}} reviews)</span>
      </div>
      {{/if}}

      <!-- Action Buttons -->
      <div class="d-flex gap-3 mt-4">
        <button type="button" class="btn btn-primary add-to-cart-btn" data-product-id="{{product._id}}" style="font-family: 'Inter', sans-serif; border-radius: 12px; font-size: 1rem; padding: 0.75rem 1.5rem; background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%); border: none; transition: all 0.3s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);">Add to Cart</button>
        <a href="/place-order?productId={{product._id}}" class="btn btn-success" style="font-family: 'Inter', sans-serif; border-radius: 12px; font-size: 1rem; padding: 0.75rem 1.5rem; background: linear-gradient(135deg, #22c55e 0%, #15803d 100%); border: none; transition: all 0.3s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);">Buy Now</a>
      </div>
    </div>
  </div>

  <!-- Product Specifications -->
  <div class="mt-5">
    <h3 style="font-family: 'Playfair Display', serif; font-weight: 600; color: #1a252f;">Specifications</h3>
    <div class="card shadow-sm" style="border-radius: 15px; border: none;">
      <div class="card-body">
        <table class="table table-borderless">
          <tbody>
            {{#each product.Specifications}}
            <tr>
              <th style="font-family: 'Inter', sans-serif; color: #6c757d; width: 30%;">{{@key}}</th>
              <td style="font-family: 'Inter', sans-serif; color: #1a252f;">{{this}}</td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Reviews Section -->
  <div class="mt-5">
    <h3 style="font-family: 'Playfair Display', serif; font-weight: 600; color: #1a252f;">Customer Reviews</h3>
    {{#if product.Reviews.length}}
    {{#each product.Reviews}}
    <div class="card mb-3 shadow-sm" style="border-radius: 15px; border: none;">
      <div class="card-body">
        <h5 class="card-title" style="font-family: 'Inter', sans-serif; color: #1a252f;">{{username}}</h5>
        <p class="card-text" style="font-family: 'Inter', sans-serif; color: #6c757d;">
          {{#times rating}}
          <span style="color: #facc15;">★</span>
          {{/times}}
          {{comment}}
        </p>
        <p class="card-text"><small style="font-family: 'Inter', sans-serif; color: #adb5bd;">Posted on {{formatDate date}}</small></p>
      </div>
    </div>
    {{/each}}
    {{else}}
    <p style="font-family: 'Inter', sans-serif; color: #6c757d;">No reviews yet. Be the first to review this product!</p>
    {{/if}}

    <!-- Review Submission Form -->
    {{#if user}}
    <div class="mt-4">
      <h4 style="font-family: 'Inter', sans-serif; color: #1a252f;">Add Your Review</h4>
      <form id="reviewForm" class="needs-validation" novalidate>
        <div class="mb-3">
          <label for="rating" class="form-label">Rating</label>
          <select class="form-control" id="rating" name="rating" required>
            <option value="">Select Rating</option>
            <option value="1">1 ★</option>
            <option value="2">2 ★★</option>
            <option value="3">3 ★★★</option>
            <option value="4">4 ★★★★</option>
            <option value="5">5 ★★★★★</option>
          </select>
          <div class="invalid-feedback">Please select a rating.</div>
        </div>
        <div class="mb-3">
          <label for="comment" class="form-label">Comment</label>
          <textarea class="form-control" id="comment" name="comment" rows="3" required></textarea>
          <div class="invalid-feedback">Please enter a comment.</div>
        </div>
        <button type="submit" class="btn btn-primary" style="font-family: 'Inter', sans-serif; border-radius: 12px;">Submit Review</button>
      </form>
    </div>
    {{else}}
    <p style="font-family: 'Inter', sans-serif; color: #6c757d;">Please <a href="/login?redirect={{currentUrl}}">log in</a> to submit a review.</p>
    {{/if}}
  </div>
  {{/if}}
</section>

<!-- Include Google Fonts for Premium Typography -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@400;600;700&display=swap">

<!-- Bootstrap CSS and JS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
  body {
    background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
  }

  .btn-primary:hover, .btn-success:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1e3a8a 100%);
  }

  .btn-success:hover {
    background: linear-gradient(135deg, #16a34a 0%, #14532d 100%);
  }

  .carousel-item img {
    transition: opacity 0.5s ease-in-out, transform 0.3s ease;
  }

  .carousel-item img:hover {
    transform: scale(1.02);
  }

  .thumbnail-img.active, .thumbnail-img:hover {
    border: 2px solid #3b82f6 !important;
  }

  .table th {
    background-color: transparent;
    font-weight: 500;
  }

  .card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15) !important;
  }

  #reviewForm .form-control:invalid {
    border-color: #dc3545;
  }

  #reviewForm .form-control:valid {
    border-color: #198754;
  }
</style>

<script>
  console.log('product-details.hbs script loaded at:', new Date().toISOString());

  let user = null;
  try {
    const userData = {{{json user}}};
    user = userData;
    console.log('User object loaded:', user);
    if (user && user._id) {
      console.log('User ID:', user._id);
    } else {
      console.log('No valid user object or user._id missing');
    }
  } catch (error) {
    console.error('Error parsing user object:', error.message);
    user = null;
  }

  // Set current URL for login redirect
  const currentUrl = encodeURIComponent(window.location.pathname + window.location.search);
  document.querySelectorAll('a[href*="/login?redirect"]').forEach(link => {
    link.href += currentUrl;
  });

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, setting up event listeners');

    // Set up Add to Cart buttons
    const buttons = document.querySelectorAll('.add-to-cart-btn');
    if (buttons.length === 0) {
      console.error('No Add to Cart buttons found on the page');
    } else {
      console.log('Found', buttons.length, 'Add to Cart buttons');
    }
    buttons.forEach((button, index) => {
      console.log(`Setting up button ${index + 1} with product ID:`, button.getAttribute('data-product-id'));
      button.addEventListener('click', function(event) {
        event.preventDefault();
        const productId = this.getAttribute('data-product-id');
        console.log('Add to Cart clicked for product ID:', productId);
        addToCart(productId, this);
      });
    });

    // Set up thumbnail click handlers and active state
    const thumbnails = document.querySelectorAll('.thumbnail-img');
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', function() {
        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
      });
      if (index === 0) {
        thumbnail.classList.add('active');
      }
    });

    // Sync thumbnail active state with carousel slide
    const carousel = document.getElementById('productCarousel');
    carousel.addEventListener('slid.bs.carousel', function(event) {
      const activeIndex = event.to;
      thumbnails.forEach(t => t.classList.remove('active'));
      thumbnails[activeIndex].classList.add('active');
    });

    // Set up review form submission
    const reviewForm = document.getElementById('reviewForm');
    if (reviewForm && user) {
      reviewForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        // Validate form
        if (!reviewForm.checkValidity()) {
          event.stopPropagation();
          reviewForm.classList.add('was-validated');
          return;
        }

        const productId = '{{product._id}}';
        const rating = document.getElementById('rating').value;
        const comment = document.getElementById('comment').value;

        try {
          const response = await fetch(`/submit-review/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ rating, comment })
          });

          const data = await response.json();
          if (data.status) {
            alert('Review submitted successfully!');
            // Optionally reload the page or update UI
            window.location.reload();
          } else {
            alert('Failed to submit review: ' + data.error);
          }
        } catch (err) {
          console.error('Review submission error:', err);
          alert('An error occurred while submitting the review.');
        }
      });
    }
  });

  function addToCart(productId, button) {
    console.log('addToCart called with productId:', productId);

    if (!user || !user._id) {
      console.log('User not logged in or user._id missing, attempting to redirect to /login');
      try {
        window.location.href = '/login';
        console.log('window.location.href set to /login');
        setTimeout(() => {
          if (window.location.pathname !== '/login') {
            console.warn('window.location.href did not redirect, trying window.location.assign');
            window.location.assign('/login');
            setTimeout(() => {
              if (window.location.pathname !== '/login') {
                console.warn('window.location.assign did not redirect, trying window.location.replace');
                window.location.replace('/login');
              }
            }, 500);
          }
        }, 500);
      } catch (error) {
        console.error('Error during redirect to /login:', error.message);
        alert('Failed to redirect to login page. Please navigate to /login manually.');
      }
      return;
    }

    console.log('User is logged in, proceeding with add to cart');
    const originalText = button.textContent;
    button.textContent = 'Adding...';
    button.disabled = true;
    console.log('Button state changed to loading');

    fetch(`/add-to-cart/${productId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include'
    })
      .then(response => {
        console.log('Fetch response received:', { 
          status: response.status, 
          statusText: response.statusText, 
          redirected: response.redirected, 
          url: response.url 
        });

        if (response.redirected || response.status === 302) {
          console.log('Redirect detected, redirecting to:', response.url);
          window.location.href = '/login';
          return null;
        }

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status} ${response.statusText}`);
        }

        return response.json().catch(err => {
          console.error('Failed to parse JSON response:', err.message);
          throw new Error('Invalid JSON response from server');
        });
      })
      .then(data => {
        button.textContent = originalText;
        button.disabled = false;
        console.log('Button state reset to normal');

        if (!data) return;

        console.log('Parsed response data:', data);

        if (data.redirect) {
          console.log('Server instructed redirect to:', data.redirect);
          window.location.href = data.redirect;
          return;
        }

        if (data.status) {
          console.log('Product added to cart successfully');
          alert('Product added to cart successfully!');
        } else {
          console.error('Add to cart failed:', data.error || 'Unknown error');
          alert('Failed to add product to cart: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        button.textContent = originalText;
        button.disabled = false;
        console.error('Add to Cart Error:', error.message);
        alert('An error occurred while adding the product to the cart: ' + error.message);
      });
  }
</script>