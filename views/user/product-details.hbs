<section class="container my-5">
  {{#if error}}
  <div class="alert alert-danger" role="alert">
    {{error}}
  </div>
  {{else}}
  <div class="row">
    <!-- Product Images Carousel -->
    <div class="col-md-6">
      <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
          <!-- Main Image -->
          <div class="carousel-item active">
            <img src="{{#if product.Image}}/product-images/{{product.Image}}{{else}}/product-images/{{product._id}}.jpg{{/if}}" class="d-block w-100" style="height: 400px; object-fit: contain; border-radius: 15px;" alt="{{product.Name}} - Main Image" onerror="this.style.display='none';">
          </div>
          <!-- Dynamic Additional Images -->
          {{#each product.Images}}
          <div class="carousel-item">
            <img src="/product-images/{{this}}" class="d-block w-100" style="height: 400px; object-fit: contain; border-radius: 15px;" alt="{{../product.Name}} - Additional Image" onerror="this.style.display='none';">
          </div>
          {{/each}}
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
    </div>

    <!-- Product Details -->
    <div class="col-md-6">
      <h2 style="font-family: 'Lora', serif; font-weight: 600; color: #1a252f;">{{product.Name}}</h2>
      <p style="font-family: 'Poppins', sans-serif; font-size: 1rem; color: #7f8c8d;">{{product.Description}}</p>
      <h4 style="font-family: 'Poppins', serif; font-weight: 600; color: #1a252f;">Rs. {{product.Price}}</h4>

      <!-- Action Buttons -->
      <div class="d-flex gap-3 mt-4">
        <button type="button" class="btn btn-primary add-to-cart-btn" data-product-id="{{product._id}}" style="border-radius: 10px; font-size: 1rem; padding: 0.5rem 1rem; background: linear-gradient(135deg, #2c6da6 0%, #3498db 100%); border: none; transition: all 0.3s ease;">Add to Cart</button>
        <a href="/place-order?productId={{product._id}}" class="btn btn-success" style="border-radius: 10px; font-size: 1rem; padding: 0.5rem 1rem; background: linear-gradient(135deg, #28a745 0%, #34c759 100%); border: none; transition: all 0.3s ease;">Buy Now</a>
      </div>
    </div>
  </div>

  <!-- Product Specifications -->
  <div class="mt-5">
    <h3 style="font-family: 'Lora', serif; font-weight: 600; color: #1a252f;">Specifications</h3>
    <table class="table table-bordered">
      <tbody>
        {{#each product.Specifications}}
        <tr>
          <th>{{@key}}</th>
          <td>{{this}}</td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </div>

  <!-- Reviews Section -->
  <div class="mt-5">
    <h3 style="font-family: 'Lora', serif; font-weight: 600; color: #1a252f;">Customer Reviews</h3>
    {{#if product.Reviews.length}}
    {{#each product.Reviews}}
    <div class="card mb-3">
      <div class="card-body">
        <h5 class="card-title">{{username}}</h5>
        <p class="card-text">
          {{#times rating}}
          ‚≠ê
          {{/times}}
          {{comment}}
        </p>
        <p class="card-text"><small class="text-muted">Posted on {{formatDate date}}</small></p>
      </div>
    </div>
    {{/each}}
    {{else}}
    <p>No reviews yet. Be the first to review this product!</p>
    {{/if}}
  </div>
  {{/if}}
</section>

<style>
  .btn-primary:hover, .btn-success:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #1e5b8c 0%, #2c6da6 100%);
  }

  .btn-success:hover {
    background: linear-gradient(135deg, #218838 0%, #28a745 100%);
  }

  .carousel-item img {
    transition: opacity 0.5s ease-in-out;
  }

  .table th {
    background-color: #f1f1f1;
    font-family: 'Poppins', sans-serif;
  }

  .card {
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  console.log('product-details.hbs script loaded at:', new Date().toISOString());

  let user = null;
  try {
    const userData = {{{json user}}};
    user = userData;
    console.log('User object loaded:', user);
    if (user && user._id) {
      console.log('User ID:', user._id);
    } else {
      console.log('No valid user object or user._id missing');
    }
  } catch (error) {
    console.error('Error parsing user object:', error.message);
    user = null;
  }

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, setting up event listeners');
    const buttons = document.querySelectorAll('.add-to-cart-btn');
    if (buttons.length === 0) {
      console.error('No Add to Cart buttons found on the page');
    } else {
      console.log('Found', buttons.length, 'Add to Cart buttons');
    }
    buttons.forEach((button, index) => {
      console.log(`Setting up button ${index + 1} with product ID:`, button.getAttribute('data-product-id'));
      button.addEventListener('click', function(event) {
        event.preventDefault();
        const productId = this.getAttribute('data-product-id');
        console.log('Add to Cart clicked for product ID:', productId);
        addToCart(productId, this);
      });
    });
  });

  function addToCart(productId, button) {
    console.log('addToCart called with productId:', productId);

    if (!user || !user._id) {
      console.log('User not logged in or user._id missing, attempting to redirect to /login');
      try {
        window.location.href = '/login';
        console.log('window.location.href set to /login');
        setTimeout(() => {
          if (window.location.pathname !== '/login') {
            console.warn('window.location.href did not redirect, trying window.location.assign');
            window.location.assign('/login');
            setTimeout(() => {
              if (window.location.pathname !== '/login') {
                console.warn('window.location.assign did not redirect, trying window.location.replace');
                window.location.replace('/login');
              }
            }, 500);
          }
        }, 500);
      } catch (error) {
        console.error('Error during redirect to /login:', error.message);
        alert('Failed to redirect to login page. Please navigate to /login manually.');
      }
      return;
    }

    console.log('User is logged in, proceeding with add to cart');
    const originalText = button.textContent;
    button.textContent = 'Adding...';
    button.disabled = true;
    console.log('Button state changed to loading');

    fetch(`/add-to-cart/${productId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include'
    })
      .then(response => {
        console.log('Fetch response received:', { 
          status: response.status, 
          statusText: response.statusText, 
          redirected: response.redirected, 
          url: response.url 
        });

        if (response.redirected || response.status === 302) {
          console.log('Redirect detected, redirecting to:', response.url);
          window.location.href = '/login';
          return null;
        }

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status} ${response.statusText}`);
        }

        return response.json().catch(err => {
          console.error('Failed to parse JSON response:', err.message);
          throw new Error('Invalid JSON response from server');
        });
      })
      .then(data => {
        button.textContent = originalText;
        button.disabled = false;
        console.log('Button state reset to normal');

        if (!data) return;

        console.log('Parsed response data:', data);

        if (data.redirect) {
          console.log('Server instructed redirect to:', data.redirect);
          window.location.href = data.redirect;
          return;
        }

        if (data.status) {
          console.log('Product added to cart successfully');
          alert('Product added to cart successfully!');
        } else {
          console.error('Add to cart failed:', data.error || 'Unknown error');
          alert('Failed to add product to cart: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        button.textContent = originalText;
        button.disabled = false;
        console.error('Add to Cart Error:', error.message);
        alert('An error occurred while adding the product to the cart: ' + error.message);
      });
  }
</script>